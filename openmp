#include <stdio.h>
#include <stdlib.h>
#include <omp.h>
#include <time.h>

// Hàm tìm giá trị lớn nhất trong mảng
int getMax(int arr[], int n) {
    int max_val = arr[0];
    #pragma omp parallel for reduction(max:max_val)
    for (int i = 1; i < n; i++) {
        if (arr[i] > max_val)
            max_val = arr[i];
    }
    return max_val;
}

// Hàm thực hiện Counting Sort cho Radix Sort
void countSort(int arr[], int n, int exp) {
    int *output = (int*)malloc(n * sizeof(int));
    int count[10] = {0};  // Khởi tạo lại count cho mỗi chữ số

    // Đếm số lần xuất hiện của mỗi chữ số
    for (int i = 0; i < n; i++) {
        int digit = (arr[i] / exp) % 10;
        #pragma omp atomic
        count[digit]++;
    }

    // Cộng dồn để xác định vị trí chính xác trong mảng đầu ra
    for (int i = 1; i < 10; i++)
        count[i] += count[i - 1];

    // Xây dựng mảng đầu ra
    for (int i = n - 1; i >= 0; i--) {
        int digit = (arr[i] / exp) % 10;
        output[count[digit] - 1] = arr[i];
        count[digit]--;
    }

    // Sao chép mảng đầu ra vào mảng gốc
    #pragma omp parallel for
    for (int i = 0; i < n; i++)
        arr[i] = output[i];

    free(output);
}

// Hàm chính Radix Sort song song
void parallelRadixSort(int arr[], int n) {
    int max_val = getMax(arr, n);

    // Thực hiện Counting Sort cho từng chữ số
    for (int exp = 1; max_val / exp > 0; exp *= 10) {
        countSort(arr, n, exp);
    }
}

// Hàm hoán đổi vị trí hai phần tử
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Hàm trộn ngẫu nhiên mảng
void shuffleArray(int arr[], int n) {
    for (int i = n - 1; i > 0; i--) {
        int j = rand() % (i + 1);
        swap(&arr[i], &arr[j]);
    }
}

int main() {
    int n = 100000; // Giảm số lượng phần tử để dễ kiểm tra kết quả
    int *arr = (int*)malloc(n * sizeof(int));

    // Khởi tạo số ngẫu nhiên
    srand(time(NULL));

    // Khởi tạo mảng từ 1 đến n
    for (int i = 0; i < n; i++) {
        arr[i] = i + 1;
    }

    // Trộn ngẫu nhiên mảng
    shuffleArray(arr, n);

    // In mảng trước khi sắp xếp
    /*printf("mang truoc khi sap xep:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");*/

    // Thiết lập số lượng luồng OpenMP
    int num_threads = 4;
    omp_set_num_threads(num_threads);

    double start_time = omp_get_wtime();
    parallelRadixSort(arr, n);
    double end_time = omp_get_wtime();

    // In mảng sau khi sắp xếp
    /*printf("mang sau khi sap xep:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");*/

    printf("thoi gian thuc hien: %f giây\n", end_time - start_time);
    printf("so luong luong thuc hien: %d\n", num_threads);

    free(arr);
    return 0;
}
